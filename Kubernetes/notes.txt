
// create a pod

apiVersion: v1
kind: Pod
metadata:
  name: siva-nginx-pod     # pod will be created with this name
  labels:
    app: nginx
spec:
  containers:
    - name: nginx-image
      image: nginx


siva@SIVA-PC:~/Downloads/docker/Kubernetes/Practice$ kubectl get nodes 
NAME       STATUS   ROLES           AGE   VERSION
minikube   Ready    control-plane   21d   v1.26.3


// create a multicontainer pod

apiVersion: v1
kind: Pod
metadata:
  name: siva-nginx-pod     # pod will be created with this name
  labels:
    app: nginx
spec:
  containers:
    - name: nginx-image
      image: nginx
    - name: bsy-box
      image: busybox


// create pod definition like this

kubectl run redis-container --image=redis --dry-run=client -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redis-container
  name: redis-container
spec:
  containers:
  - image: redis
    name: redis-container
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


// replication controller
// note you cannot use the selector here

apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-rc
  labels:
    type: frontendApp-rc
spec:
  template:
    metadata:
      name: siva-nginx-pod
      labels:
        app: my-app
        type: frontend
    spec:
      containers:
        - name: nginx-image
          image: nginx
  replicas: 3

// to delete the replication controllers

kubectl delete replicationcontrollers nginx-rc 


// replicaSet

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-rs
  labels:
    type: frontendApp-rs
spec:
  template:
    metadata:
      name: siva-nginx-pod
      labels:
        app: my-app
        type: frontend
    spec:
      containers:
        - name: nginx-image
          image: nginx
  replicas: 3
  selector:
    matchLabels:
      app: my-app

// to scale up the replicasets

kubectl scale --replicas=5 replicaset nginx-rs

// note that below file must present in location where you are running 
kubectl scale --replicas=6 -f replicaSet.yaml


// to edit the replicaset definition directly
kubectl edit replicasets.apps nginx-rs


//scaling commands
> kubectl replace -f replicaset-definition.yml
> kubectl scale -–replicas=6 –f replicaset-definition.yml
> kubectl scale -–replicas=6 replicaset myapp-replicaset

// replicaset creation and deletion commands
> kubectl create –f replicaset-definition.yml
> kubectl get replicaset
> kubectl delete replicaset myapp-replicaset
> kubectl replace -f replicaset-definition.yml
> kubectl scale --replicas=6 -f replicaset-definition.yml


//creating deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: my-app
    kind: frontend
spec:
  template:
    metadata:
      name: siva-nginx-pod
      labels:
        app: my-app
        type: frontend
    spec:
      containers:
        - name: nginx-image
          image: nginx
  replicas: 3
  selector:
    matchLabels:
      app: my-app
    

>kubectl rollout status deployment nginx-deployment 
deployment "nginx-deployment" successfully rolled out

>kubectl rollout history deployment nginx-deployment 
deployment.apps/nginx-deployment 
REVISION  CHANGE-CAUSE
1         <none>


  





apiVersion: v1
kind: Secret
metadata: 
  name: db-secret
type: opaque
data:
  DB_Host: c3FsMDEK
  DB_User: cm9vdAo=
  DB_Password: GFzc3dvcmQxMjMK
  
  
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
  
apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  labels:
    name: webapp-pod
spec:
  containers:
    - name: webapp
      image: kodekloud/simple-webapp-mysql
      envFrom:
      - secretRef:
        name: db-secret


apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleepeer
  labels:
    name: ubuntu-sleeper
spec:
  securityContext:
    runAsUser: 1010
  containers:
    image: ubuntu
    name: ubuntu-sleeper
  - command:
    - sleep
    - "4500"





apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleepeer
  labels:
    name: ubuntu-sleeper
spec:
  securityContext:
    runAsUser: 1010
  containers:
  - name: ubuntu-sleepeer
    image: ubuntu
  - command:
    - sleep
    - "4500"



==================================================================

-- this wont work, but the second ones work

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  securityContext:
    capabilities:
      add: ["SYS_TIME"]
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper



apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper
    securityContext:
      capabilities:
        add: ["SYS_TIME"]
=====================================================================



apiVersion: v1
kind: Pod
metadata:
  name: mosquito
spec:
  containers:
    - image: nginx
      name: mosquito


=================================================================

// Create a taint tolerant to taint

apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
    - image: nginx
      name: bee
  tolerations:
  - key: "spray"
    operator: "Equal"
    value: "mortien"
    effect: "NoSchedule"  // this particular line is also required it seems



Do you see any taints on controlplane node?
> kubectl describe node controlplane



Remove the taint on controlplane, which currently has the taint effect of NoSchedule.
> kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-


How many Labels exist on node node01?
> kubectl describe node node01


Apply a label color=blue to node node01
> kubectl label node node01 color=blue


Create a new deployment named blue with the nginx image and 3 replicas

apiVersion: v1
kind: deployment
metadata:
  name: blue
spec:
  metadata:
    name: blue
  spec:
    containers:
      - name: nginx
        image: nginx

  replicas: 3


// or use the below command

kubectl create deployment blue --image=nginx --replicas=3


