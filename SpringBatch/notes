
	@Bean
	public Job firstJob() {
		return jobBuilderFactory.get("First Job")
				.incrementer(new RunIdIncrementer()) --> this will automaticall increment the parameter
				.start(firstStep())
				.next(secondStep())
				.listener(firstJobListener)
				.build();


-- JobExecutionListener will monitor the job
-- have the required steps to print the exectionContext, parameters will be in key-value pairs

    @Component
    public class FirstJobListener implements JobExecutionListener {

        @Override
        public void beforeJob(JobExecution jobExecution) {
            System.out.println("Before Job " + jobExecution.getJobInstance().getJobName());
            System.out.println("Job Params " + jobExecution.getJobParameters());
            System.out.println("Job Exec Context " + jobExecution.getExecutionContext());
            
            jobExecution.getExecutionContext().put("jec", "jec value"); --> add something to the context like this
        }

        @Override
        public void afterJob(JobExecution jobExecution) {
            System.out.println("After Job " + jobExecution.getJobInstance().getJobName());
            System.out.println("Job Params " + jobExecution.getJobParameters());
            System.out.println("Job Exec Context " + jobExecution.getExecutionContext());	
        }

    }

// add the data in the step execution context like below

@Component
public class FirstStepListener implements StepExecutionListener {

	@Override
	public void beforeStep(StepExecution stepExecution) {
		System.out.println("Before Step " + stepExecution.getStepName());
		System.out.println("Job Exec Cont " + stepExecution.getJobExecution().getExecutionContext());
		System.out.println("Step Exec Cont " + stepExecution.getExecutionContext());
		
		stepExecution.getExecutionContext().put("sec", "sec value");  // <-- add like this to step Execution context
	}

	@Override
	public ExitStatus afterStep(StepExecution stepExecution) {
		System.out.println("After Step " + stepExecution.getStepName());
		System.out.println("Job Exec Cont " + stepExecution.getJobExecution().getExecutionContext());
		System.out.println("Step Exec Cont " + stepExecution.getExecutionContext());
		return null;
	}

}

// access the data in the step execution context like below

private Tasklet firstTask() {
    return new Tasklet() {

        @Override
        public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
            System.out.println("This is first tasklet step");
            System.out.println("SEC = " + chunkContext.getStepContext().getStepExecutionContext());
            return RepeatStatus.FINISHED;
        }
    };
}
